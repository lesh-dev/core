<?php
/*
    ReadText -- a new readfile implementation
    Syntax:
    <# readtext  [--markdown] [--limit=number] [--next-link=url] [--next-text=text] [--file=file_name] #>
        --file -- имя файла, которое нужно зачитать. Если опущено -- читается из переменной $source
        --markdown -- указыавет на то, что текст нужно интерпретировать markdown-ом
        --limit -- ограничение на число знаков
        --next-link-url -- указывает гиперссылку на полный текст
        --next-link-text -- указывает текст ссылки, ведущий на полный текст
        --text -- указыавет на то, что переменная $text уже зачитана и нужно отобразить текст,
            что в ней находится. Переменная $source (имя файла) по-прежнему
            имеет значение (в смысле кэширования)
*/
$ARG = implode(",", $argv);
$compiled = ".prec/cms_readfile_".md5($ARG).md5(@$source).md5(@$text).".dat";

$need = false;
if (!file_exists($compiled)) $need = true;
if (@filemtime($source) > @filemtime($compiled)) $need = true;
if ($need)
{
    $markdown = false;
    $text_defined = false;
    $limit = -1;
    $nextlink = "whereiam";
    $nexttext = "[more]";
    foreach($argv as $arg)
    {
        if($arg == "--markdown")
            $markdown = true;
        if($arg == "--text")
            $text_defined = true;
        elseif (strpos($arg, "="))
        {
            $arr = explode(EXP_EQ, $arg, 2);
            if($arr[0] == "--limit")
                $limit = $arr[1];
            if($arr[0] == "--next-link")
                $nextlink = $arr[1];
            if($arr[0] == "--next-text")
                $nexttext = $arr[1];
            if($arr[0] == "--file")
                $source = $arr[1];
        }
    }
    if(!$text_defined)
        $text = file_get_contents($source);
    //// Обработка синтаксиса
    //// ${prefix} раскрывается в путь до текущего $pageid
    $text = str_replace(
        '${prefix}',
        "${full_content_dir}cms/pages/$pageid",
        $text);
    //// ${web_prefix} раскрывается в путь до корня сайта
    $wpx = "/$web_prefix";
    $wpx = preg_replace('#/$#i', "", $wpx);
    $text = str_replace('${web_prefix}', $wpx, $text);
    //// ${content_prefix} раскрывается в путь до контента сайта
    $cpx = $full_content_dir;
    $cpx = preg_replace('#/$#i', "", $cpx);
    $text = str_replace('${content_prefix}', $cpx, $text);
    //// ${engine_pub} раскрывается в путь до системного каталога с общим web-содержимым
    $epx = "$wpx/$engine_pub";
    $epx = preg_replace('#/$#i', "", $epx);
    $text = str_replace('${engine_pub}', $epx, $text);

    //// ${include:pageid} -- раскрывается в _содержимое_ целого раздела
    //// Обработка произвольных dollar notation
    $dir = "${engine_dir}plugins/dollar/";
    foreach(glob("$dir*.php") as $notation)
    {
        $name = $notation;
        $name = str_replace("$dir", "", $name);
        $name = str_replace(".php", "", $name);
        while(1)
        {
            $p = strpos($text, "\${"."$name");
            if($p === FALSE)
                break;
            $l = strpos($text, "}", $p);
            $target = substr($text, $p, $l-$p);
            $target = substr($target, strlen($name)+3);
            if(strlen($target))
                $uargs = explode(EXP_COL, $target);
            else
                $uargs = array();
            $idata = "";
            foreach($uargs as $k=>$v)
            {
                $idata .= "\$_$k = \"$v\";";
            }
            $text = substr($text, 0, $p).
                "<?php $idata ; include(\"$engine_dir/plugins/dollar/$name.php\"); ?>".
                substr($text, $l+1);
        }
    }
    //// Обработка синтаксиса: [[Текст ссылки:pageid]]
    //$text = preg_replace('x', "<a href=\"/$web_prefix?ref={$_GET['ref']}&page=\\1\">link</a>", $text);
    $text = preg_replace(
        '/\[\[\/([a-zA-Z]*)\]\]/Uis',
        "<a href=\"/$web_prefix\\1\">link</a>",
        $text);
    $text = preg_replace(
        '/\[\[(.*):\/([A-Za-z0-9_\/\-]*)\]\]/Uis',
        "<a href=\"/$web_prefix\\2\">\\1</a>",
        $text);
    $text = preg_replace(
        '/\[\[([a-zA-Z]*)\]\]/Uis',
        "<a href=\"/$web_prefix?ref={$_GET['ref']}&page=\\1\">link</a>",
        $text);
    $text = preg_replace(
        '/\[\[(.*):([A-Za-z0-9_\/\-]*)\]\]/Uis',
        "<a href=\"/$web_prefix?ref={$_GET['ref']}&page=\\2\">\\1</a>",
        $text);

    $text = preg_replace(
        '/\(\((.*?) (.*?)\)\)/',
        '<a href="\1">\2</a>',
        $text);

    // TODO (#204): это костыли, надо их выкинуть или написать нормально. Не должно быть на странице
    // никаких ссылок, кроме как через теги. В любом случае искать в урлах последовательность
    // вида ref=index&page=... это очень странно
    //// Замена всех ссылок на страницы на их тег-версии
    $aliases = xcms_get_aliases();
    if($aliases)foreach($aliases as $alias=>$page)
    {
        $text = str_replace("?ref=index&page=$page\"", "$alias\"", $text);
        $text = str_replace("?page=$page&ref=index\"", "$alias\"", $text);
        $text = str_replace("?page=$page\"", "$alias\"", $text);
    }
    //// Обработка синтаксиса: <code>Моноширинный текст</code>
    $text = str_replace(
        "<code>",
        '<div class="monospace-outer"><div class="monospace-inner">',
        $text);
    $text = str_replace("</code>", "</div></div>", $text);
    //// Обработка кавычек-ёлочек
    $text = str_replace("<<", "&laquo;", $text);
    $text = str_replace(">>", "&raquo;", $text);
    //// Обработка тире и неразрывных пробелов
    $text = str_replace("---", "&#8212;", $text);
    // Попытка что-то сделать с #617
    $text = str_replace(" - ", "&nbsp;&#8212; ", $text);
    // avoid HTML comments replacing here
    $text = preg_replace('/([^!])--([^>])/', '\1&#8211;\2', $text);
    $text = str_replace("~", "&nbsp;", $text);

    //// Обработка сокращенного наименования
    $text = xcms_truncate_text($text, $limit, "...&nbsp;[<a href=\"$nextlink\">$nexttext</a>]");

    xcms_write($compiled, $text);
}

include($compiled);
?>
