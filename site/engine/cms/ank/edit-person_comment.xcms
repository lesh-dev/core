<?php
require_once("${engine_dir}xsm/diff.php");
require_once("${engine_dir}cms/ank/edit-format.php");

// Специфическая функция для данной таблицы (можно объединить с person_school)
function xsm_person_comment_edit_operations($table_name, $id, $ret_title, $member_person_id)
{
    $school_id = XSM_SCHOOL_ANK_ID;
    $is_new = ($id == XDB_NEW);
    $redir = "view-person".xcms_url(array('school_id' => $school_id, 'person_id' => $member_person_id));
    xsm_edit_ops($table_name, $is_new, $redir, $ret_title, "Удалить комментарий");
}

/**
  * Специфическая функция: возврат происходит совсем в другую таблицу, нежели редактируемая сущность
  * TODO: Сделать более генерический update, чтобы можно было гибко обрабатывать и такие случаи тоже
  **/
function xsm_update_person_comment($title, $fields)
{
    $table_name = "person_comment";
    $key_name = "${table_name}_id";
    $id = xcms_get_key_or($_POST, $key_name, 'invalid'); // invalid key
    $res = xdb_insert_or_update($table_name, array($key_name => $id), $_POST, $fields);
    if ($res)
    {
        $id = $res;
        ?>
        <p><?php echo $title; ?> успешно сохранён.<?php
    }
    else
    {?>
        <p>Не удалось добавить <?php echo $title; ?>.<?php
    }
    $person_id = xcms_get_key_or($_POST, 'blamed_person_id', XDB_INVALID_ID);
    $school_id = XSM_SCHOOL_ANK_ID;
    $redir = "view-person".xcms_url(array('person_id' => $person_id, 'school_id' => $school_id));
    ?>
    <a href="<?php echo $redir; ?>">Вернуться к просмотру участника</a></p><?php
}

/* Ещё одна специфическая функция -- возврат на редактирование, а не на просмотр,
т.к. просмотра отдельно не существует) */
function xsm_warn_delete_person_comment($table_name, $title, $aux_param = '')
{
    $key_name = "${table_name}_id";
    $id = xcms_get_key_or($_POST, $key_name, 'invalid'); // invalid key
    $redir = "$table_name$aux_param".xcms_url(array($key_name => $id));
    xsm_warn_delete_ops($table_name, $key_name, $id, $redir, "комментарий", $aux_param);
}

function xsm_delete_person_comment($table_name, $title, $aux_param = '')
{
    $key_name = "${table_name}_id";
    $id = xcms_get_key_or($_POST, $key_name, 'invalid'); // invalid key
    $person_comment = xdb_get_entity_by_id($table_name, $id);
    $person_id = $person_comment['blamed_person_id'];
    $school_id = XSM_SCHOOL_ANK_ID;
    $redir = "view-person".xcms_url(array('person_id' => $person_id, 'school_id' => $school_id));
    // experimental 'delete as status update'
    $res = xdb_insert_or_update($table_name, array($key_name => $id),
        array('person_comment_deleted' => 'deleted'), xsm_get_fields("person_comment"));
    //$res = xdb_delete($table_name, $id);
    if ($res)
    {?>
        <p><?php echo $title; ?> [<?php echo $id; ?>] удалён успешно.<?php
    }
    else
    {?>
        <p>Не удалось удалить <?php echo $title; ?> [<?php echo $id; ?>] (возможно, есть связанные объекты).<?php
    }?>
    <a href="<?php echo $redir ?>">Вернуться к просмотру участника</a></p><?php
}


function xsm_notify_person_comment_edit($person_comment)
{
    $person_comment_id = $person_comment['person_comment_id'];
    $old_person_comment = ($person_comment_id != XDB_NEW) ? xdb_get_entity_by_id('person_comment', $person_comment_id) : array();

    $person_id = $person_comment['blamed_person_id'];
    $person = xdb_get_entity_by_id('person', $person_id);

    $full_name = xsm_fio_enc($person);
    $table_title = 'Добавлен комментарий к участнику: <a'.
        xsm_ext_href('view-person', array('person_id' => $person_id)).'>'.
        $full_name.'</a>';

    $mail_msg = xsm_build_diff_msg(
        $person_comment,
        $old_person_comment,
        'person_comment',
        xsm_get_fields("person_comment"),
        $table_title);

    xcms_send_notification("reg", NULL, $mail_msg);
}

function xsm_edit_person_comment()
{
    $person_comment_id = xdb_get_idvar('person_comment_id');
    $person_comment = xdb_get_entity_by_id('person_comment', $person_comment_id);
    if ($person_comment_id == XDB_NEW)
    {
        // prefill
        $person_comment['owner_login'] = xcms_user()->login();
        $blamed_person_id = xdb_get_idvar('blamed_person_id');
    }
    else
    {
        $blamed_person_id = $person_comment['blamed_person_id'];
    }
    $person = xdb_get_entity_by_id('person', $blamed_person_id);

    // Админы и привилегированные могут редактировать приватные комментарии
    $xsm_private = xcms_user()->check_rights("xsm-private", false);
    $xsm_admin = xcms_user()->check_rights("admin", false);
    $record_acl = xcms_get_key_or_enc($person_comment, "record_acl");

    if ($record_acl == "xsm-private" && !$xsm_private && !$xsm_admin)
    {
        xcms_log(XLOG_ERROR, "ACL violation for person comment");
        die("Вам сюда нельзя. Если вы перешли по какой-либо ссылке, сообщите об этом на dev@fizlesh.ru. ");
        return;
    }

    $fields_desc = xsm_get_fields("person_comment"); ?>
    <form method="post" action="edit-person_comment"><?php
        xsm_person_comment_edit_operations('person_comment', $person_comment_id, 'Вернуться к просмотру участника', $blamed_person_id);
        xcmst_hidden("person_comment_id", $person_comment_id);
        xcmst_hidden("blamed_person_id", $blamed_person_id); ?>
        <table class="ankEdit table table-bordered table-hover table-condensed">
            <tr>
                <td class="ankListRowTitle">Комментарий</td>
            </tr>
            <?php
            foreach ($fields_desc as $key => $desc)
            {
                if (xsm_draw_generic_fields_begin($desc, $person_comment, $key))
                    continue;
                if ($key == 'blamed_person_id')
                    xsm_draw_field_unnamed_input($desc, xsm_fi($person));
                xsm_draw_generic_fields_end();
            }?>
        </table><?php
        xsm_bottom_fields('person_comment', $person_comment);
        xsm_person_comment_edit_operations('person_comment', $person_comment_id, 'Вернуться к просмотру участника', $blamed_person_id);?>
    </form>
    <?php
}

if (@$_POST["update-person_comment"])
{
    // Админы и привилегированные могут редактировать приватные комментарии
    $xsm_private = xcms_user()->check_rights("xsm-private", false);
    $xsm_admin = xcms_user()->check_rights("admin", false);

    $person_comment_id = xcms_get_key_or($_POST, "person_comment_id");
    if ($person_comment_id != XDB_NEW)
    {
        // forbid updating existing comments
        $person_comment = xdb_get_entity_by_id("person_comment", $person_comment_id);
        $record_acl_prev = xcms_get_key_or_enc($person_comment, "record_acl");

        if ($record_acl_prev == "xsm-private" && !$xsm_private && !$xsm_admin)
        {
            xcms_log(XLOG_ERROR, "ACL violation for person comment update");
            die("Вам сюда нельзя. Если вы перешли по какой-либо ссылке, сообщите об этом на dev@fizlesh.ru. ");
        }
    }

    $record_acl = xcms_get_key_or_enc($_POST, "record_acl");
    // send only public comments
    if ($record_acl != "xsm-private")
    {
        xsm_notify_person_comment_edit($_POST);
    }

    xsm_update_person_comment('Комментарий', xsm_get_fields("person_comment"));
}
elseif (@$_POST["delete-person_comment"])
    xsm_warn_delete_person_comment('person_comment', 'комментарий');
elseif (@$_POST["confirm-delete-person_comment"])
    xsm_delete_person_comment('person_comment', 'Комментарий');
else
    xsm_edit_person_comment();
?>
