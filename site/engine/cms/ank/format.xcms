<?php
    /**
      * Replace \n by <br /> with respect to various systems line endings
      **/
    function xcms_html_wrap_by_crlf($sHTML)
    {
        // detect UNIX or DOS line-endings
        if (strpos($sHTML, "\n") !== false)
        {
            // Unix or DOS, so \n -> <br />, '\r' -> void
            $sHTML = str_replace("\n", "<br />", $sHTML);
            $sHTML = str_replace("\r", "", $sHTML);
        }
        elseif (strpos($sHTML, "\r") !== false)
        {
            // MacOS, \r only
            $sHTML = str_replace("\r", "<br />", $sHTML);
        }
        return $sHTML;
    }

    /**
      * Prepend one <br /> when HTML code already contains some
      **/
    function xcms_html_wrap_ml($sHTML)
    {
        if (strpos($sHTML, "<br />")) $sHTML = "<br />$sHTML";
        return $sHTML;
    }

    function xsm_prepare_social_profile($social_profile)
    {
        // make it valid URL if it was it form example.com/name
        if (!empty($social_profile) &&
            strpos(substr($social_profile, 0, 8), '://') === false) // http/https scheme not matched
            $social_profile = "http://$social_profile"; // assume http scheme
        $social_profile = htmlspecialchars($social_profile);
    }

    // DATABASE: xdb

    function xdb_get()
    {
        global $content_dir;
        return new SQlite3("$content_dir/ank/fizlesh.sqlite3", SQLITE3_OPEN_READONLY);
    }

    function xdb_get_write()
    {
        global $content_dir;
        return new SQlite3("$content_dir/ank/fizlesh.sqlite3", SQLITE3_OPEN_READWRITE);
    }


    function xdb_insert_or_update($table_name, $primary_keys, $values, $allowed_keys)
    {
        $insert = false;
        foreach ($primary_keys as $key => $value)
            if ($value == "new") $insert = true;
        if ($insert)
            return xdb_insert_ai($table_name, $primary_keys, $values, $allowed_keys);
        else
            return xdb_update($table_name, $primary_keys, $values, $allowed_keys);
    }

    // single insert into autoincrement table
    function xdb_insert_ai($table_name, $pk_name, $keys_values, $allowed_keys)
    {
        $db = xdb_get_write();
        $keys = "";
        $values = "";

        // override 'created' and 'modified' field
        $unix_time = mktime();
        $hr_timestamp = date("Y.m.d H:i:s", $unix_time);
        $keys_values["${table_name}_created"] = $hr_timestamp;
        $keys_values["${table_name}_modified"] = '';

        foreach ($allowed_keys as $key => $title)
        {
            $value = xcms_get_key_or($keys_values, $key);
            if ($key == $pk_name)
                continue; // skip autoincremented keys
            $keys .= "$key, ";
            $values .= "'".$db->escapeString($value)."', ";
        }
        $keys = substr($keys, 0, strlen($keys) - 2);
        $values = substr($values, 0, strlen($values) - 2);

        $query = "INSERT INTO $table_name ($keys) VALUES ($values)";
        $result = $db->exec($query);
        if ($result)
            xcms_log(0, "[DB] $query");
        else
            xcms_log(0, "[DB:ERROR] $query");
        $db->close();
        return $result;
    }


    function xdb_update($table_name, $primary_keys, $keys_values, $allowed_keys)
    {
        $db = xdb_get_write();
        $values = "";
        // update '<table-name>-modified' timestamp
        $unix_time = mktime();
        $hr_timestamp = date("Y.m.d H:i:s", $unix_time);
        $keys_values["${table_name}_modified"] = $hr_timestamp;

        foreach ($allowed_keys as $key => $title)
        {
            $value = xcms_get_key_or($keys_values, $key);
            if ($key == "${table_name}_created")
                continue; // never update 'created' field

            if (array_key_exists($key, $primary_keys))
                continue; // skip primary keys

            $values .= "$key = '".$db->escapeString($value)."', ";
        }
        $values = substr($values, 0, strlen($values) - 2);

        $cond = "";
        foreach ($primary_keys as $key => $value)
        {
            $cond .= "($key = '".$db->escapeString($value)."') AND ";
        }
        $cond = substr($cond, 0, strlen($cond) - 5);
        $query = "UPDATE $table_name SET $values WHERE $cond";
        $result = $db->exec($query);
        if ($result)
            xcms_log(0, "[DB] $query");
        else
            xcms_log(0, "[DB:ERROR] $query");
        $db->close();
        return $result;
    }

    function xdb_delete($table_name, $key_value)
    {
        $db = xdb_get_write();
        $cond = "${table_name}_id = '".$db->escapeString($key_value)."'";
        $query = "DELETE FROM $table_name WHERE $cond";
        $result = $db->exec($query);
        if ($result)
            xcms_log(0, "[DB] $query");
        else
            xcms_log(0, "[DB:ERROR] $query");
        $db->close();
        return $result;
    }


    function xsm_update_entity($entity, $table_name, $title, $fields, $aux_param = '')
    {
        $key_name = "${table_name}_id";
        $id = xcms_get_key_or($_POST, $key_name, 'invalid'); // invalid key
        $redir = ($id == 'new') ? "$entity$aux_param" : "$entity$aux_param#$table_name$id";
        $res = xdb_insert_or_update($table_name, array($key_name=>$id), $_POST, $fields);
        if ($res)
        {?>
            <p><?php echo $title; ?> успешно сохранён.<?php
        }
        else
        {?>
            <p>Не удалось добавить <?php echo $title; ?>.<?php
        }?>
        <a href="view-<?php echo $redir; ?>">Вернуться к просмотру</a></p><?php
    }

    function xsm_warn_delete_entity($entity, $table_name, $title, $aux_param = '')
    {
        $key_name = "${table_name}_id";
        $id = xcms_get_key_or($_POST, $key_name, 'invalid'); // invalid key
        $redir = ($id == 'new') ? "$entity$aux_param" : "$entity$aux_param#$table_name$id"; ?>
        <div style="font-size: 12pt; font-weight: bold; color: #ff0000;">
            Вы действительно хотите удалить
            <?php echo $title; ?> [<?php echo $id; ?>]?<br />
            Связанные с ним объекты также будут удалены,
            а восстановление будет невозможно!</div>
        <div><form method="post" action="edit-<?php echo "$entity$aux_param"; ?>">
            <input type="hidden" name="<?php echo $key_name; ?>" value="<?php echo $id; ?>" />
            <input type="submit" name="confirm-delete-<?php echo $entity; ?>"
                value="Таки да, удалить!" class="delete-button"/>
            <a class="linkButton xsm"
                href="view-<?php echo $redir ?>">Вернуться к просмотру</a>
        </form></div>
        <?php
    }

    function xsm_warn_delete_listmode_entity($entity, $table_name, $title, $aux_param = '')
    {
        $key_name = "${table_name}_id";
        $id = xcms_get_key_or($_POST, $key_name, 'invalid'); // invalid key
        $redir = ($id == 'new') ? "$entity$aux_param" : "$entity$aux_param&amp;$key_name=$id"; ?>
        <div style="font-size: 12pt; font-weight: bold; color: #ff0000;">
            Вы действительно хотите удалить
            <?php echo $title; ?> [<?php echo $id; ?>]?<br />
            Связанные с ним объекты также будут удалены,
            а восстановление будет невозможно!</div>
        <div><form method="post" action="edit-<?php echo "$entity$aux_param"; ?>">
            <input type="hidden" name="<?php echo $key_name; ?>" value="<?php echo $id; ?>" />
            <input type="submit" name="confirm-delete-<?php echo $entity; ?>"
                value="Таки да, удалить!" class="delete-button"/>
            <a class="linkButton xsm"
                href="view-<?php echo $redir ?>">Вернуться к просмотру</a>
        </form></div>
        <?php
    }


    function xsm_delete_entity($entity, $table_name, $title, $aux_param = '')
    {
        $key_name = "${table_name}_id";
        $id = xcms_get_key_or($_POST, $key_name, 'invalid'); // invalid key
        $redir = ($id == 'new') ? "$entity$aux_param" : "$entity$aux_param#$table_name$id";
        $res = xdb_delete($table_name, $id);
        if ($res)
        {?>
            <p><?php echo $title; ?> [<?php echo $id; ?>] удалён успешно.<?php
        }
        else
        {?>
            <p>Не удалось удалить <?php echo $title; ?> [<?php echo $id; ?>] (возможно, есть связанные объекты).<?php
        }?>
        <a href="view-<?php echo $redir ?>">Вернуться к просмотру</a></p><?php
    }

    function xsm_delete_listmode_entity($entity, $table_name, $title, $aux_param = '')
    {
        $key_name = "${table_name}_id";
        $id = xcms_get_key_or($_POST, $key_name, 'invalid'); // invalid key
        $redir = ($id == 'new') ? "$entity$aux_param" : "$entity$aux_param#$table_name$id";
        $res = xdb_delete($table_name, $id);
        if ($res)
        {?>
            <p><?php echo $title; ?> [<?php echo $id; ?>] удалён успешно.<?php
        }
        else
        {?>
            <p>Не удалось удалить <?php echo $title; ?> [<?php echo $id; ?>] (возможно, есть связанные объекты).<?php
        }?>
        <a href="list-<?php echo $redir ?>">Вернуться к просмотру</a></p><?php
    }


    function xdb_get_entity_by_id($table_name, $id)
    {
        $db = xdb_get();
        $key_name = "${table_name}_id";


        if ($id != "new")
        {
            $idf = preg_replace('/[^0-9]/', '', $id);
            if (strlen($idf) == 0)
            {
                xcms_log(0, "Cannot fetch entity from '$table_name' with empty or filtered id '$id'.");
                return array();
            }
            $id = $idf;
            $query = "SELECT * FROM $table_name WHERE $key_name = $id";
            $sel = $db->query($query);
            if (!($ev = $sel->fetchArray(SQLITE3_ASSOC)))
            {
                xcms_log(0, "Cannot fetch entity from '$table_name' with id: '$id'. Query: $query.");
                return array();
            }
            $db->close();
        }
        else
        {
            // new record
            $ev = array(
                $key_name=>$id
            );
        }
        return $ev;
    }


    function xsm_make_selector($table_name, $name, $current_key, $title_keys, $aux_cond = '')
    {
        $db = xdb_get();
        $query = "SELECT * FROM $table_name";
        if (strlen($aux_cond))
            $query .= " WHERE $aux_cond";
        $sel = $db->query($query);
        $sHTML = "<select name=\"$name\">";
        $list_key = "${table_name}_id";
        while ($object = $sel->fetchArray(SQLITE3_ASSOC))
        {
            $title = "";
            foreach ($title_keys as $key_name)
                $title .= $object[$key_name].' ';
            $title = htmlspecialchars(trim($title));
            $key = $object[$list_key];
            $selected = ($key == $current_key) ? 'selected="selected"' : '';
            $sHTML .= "<option $selected value=\"$key\">$title</option>";
        }
        $sHTML .= "</select>";
        $db->close();
        return $sHTML;
    }

    // Here entity should be equal to table name, but...
    function xsm_edit_operations($entity, $table_name, $id, $title, $aux_param = '')
    {
        $is_new = ($id == 'new');
        $redir = $is_new ? "$entity$aux_param" : "$entity$aux_param#$table_name$id";
        ?>
        <div style="white-space: nowrap">
            <input type="submit" name="update-<?php echo $entity; ?>"
                value="Сохранить" style="margin-left: 0px; margin-top: 5px;" /><?php
            if (!$is_new) {?>
                <input type="submit" name="delete-<?php echo $entity; ?>"
                    value="Удалить" class="delete-button"/><?php
            }?>
            <a class="linkButton xsm" href="view-<?php
                echo $redir; ?>"><?php echo $title; ?></a>
        </div><?php
    }

    function xsm_edit_operations_listmode($entity, $id, $title, $aux_param = '')
    {
        $is_new = ($id == 'new');
        $redir = $is_new ? "$entity$aux_param" : "$entity$aux_param#$entity$id";
        ?>
        <div style="white-space: nowrap">
            <input type="submit" name="update-<?php echo $entity; ?>"
                value="Сохранить" style="margin-left: 0px; margin-top: 5px;" /><?php
            if (!$is_new) {?>
                <input type="submit" name="delete-<?php echo $entity; ?>"
                    value="Удалить" class="delete-button"/><?php
            }?>
            <a class="linkButton xsm" href="list-<?php
                echo $redir; ?>"><?php echo $title; ?></a>
        </div><?php
    }


    // Here entity should be equal to table name, but...
    function xsm_view_operations($entity, $table_name, $title, $aux_param = '')
    {?>
        <div style="white-space: nowrap">
            <a class="linkButton xsm" href="edit-<?php
                echo "$entity$aux_param&amp;${table_name}_id=new"; ?>">Добавить <?php echo $title; ?></a>
        </div><?php
    }

    // Here entity should be equal to table name, but...
    function xsm_edit_delete_info($entity, $table_name, $id, $created, $modified, $aux_param = '')
    {
        ?>
        <a class="link-oper" href="edit-<?php echo "$entity$aux_param&amp;${table_name}_id=$id" ?>"><img
            src="<# full_design_dir #>pic/edit.gif" class="edit-icon"
            title="Редактировать" />Правка</a>
        <span class="ankListField next">Создан</span>: <?php echo $created;
        if (!empty($modified)) {?>
            <span class="ankListField next">Отредактирован</span>: <?php echo $modified;
        }
    }

    function xsm_make_enum_selector($name, $value, $items)
    {
        $html = "<select name=\"$name\" id=\"$name-selector\">";
        foreach ($items as $key => $title)
        {
            $sel = ($key == $value) ? ' selected="selected" ' : '';
            $html .= "<option $sel value=\"$key\">$title</option>";
        }
        $html .= "</select>";
        return $html;
    }

    function xsm_make_checkbox($name, $value, $checked_value)
    {
        if (strlen($value)) $checked = 'checked="checked"';
        else $checked = '';
        $sHTML = "<input class=\"ankEdit checkbox\" type=\"checkbox\" name=\"$name\" ".
            "id=\"$name-checkbox\" value=\"$checked_value\" $checked />";
        return $sHTML;
    }

    function xdb_like($mask, $value)
    {
        $mask = str_replace(
            array("%", "_"),
            array(".*?", "."),
            preg_quote($mask, "/")
        );
        $mask = "/^$mask$/ui";
        return preg_match($mask, $value);
    }
?>