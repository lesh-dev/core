<?php
require_once("$engine_dir/sys/db.php");

/**
  * Replace \n by <br /> with respect to various systems line endings
  **/
function xcms_html_wrap_by_crlf($html)
{
    // detect UNIX or DOS line-endings
    if (strpos($html, "\n") !== false)
    {
        // Unix or DOS, so \n -> <br />, '\r' -> void
        $html = str_replace("\n", "<br />", $html);
        $html = str_replace("\r", "", $html);
    }
    elseif (strpos($html, "\r") !== false)
    {
        // MacOS, \r only
        $html = str_replace("\r", "<br />", $html);
    }
    return $html;
}

/**
  * Prepend one <br /> when HTML code already contains some
  **/
function xcms_html_wrap_ml($html)
{
    if (strpos($html, "<br />")) $html = "<br />$html";
    return $html;
}


function xcms_trim_object($obj)
{
    $new_obj = array();
    foreach ($obj as $key=>$value)
    {
        $new_obj[$key] = trim($value);
    }
    return $new_obj;
}

/**
  * Canonical way to obtain FIO
  **/
function xsm_fio($person)
{
    return $person['last_name'].' '.$person['first_name'].' '.$person['patronymic'];
}
/**
  * HTML-encoded version of @c xsm_fio
  **/
function xsm_fio_enc($person)
{
    return htmlspecialchars(xsm_fio($person));
}

/**
  * Canonical way to obtain FI
  **/
function xsm_fi($person, $prefix = '')
{
    return $person["${prefix}last_name"].' '.$person["${prefix}first_name"];
}
/**
  * HTML-encoded version of @c xsm_fi
  **/
function xsm_fi_enc($person, $prefix = '')
{
    return htmlspecialchars(xsm_fi($person, $prefix));
}

/**
  * Process human-usable timestamp without seconds
  * with non-breaking spaces inside.
  * @param $timestamp should be in format used in in DBMS,
  * i.e. YYYY.MM.DD HH:MM:SS
  **/
function xsm_ymdhm($timestamp)
{
    if (strlen($timestamp) != 19)
        return $timestamp;
    $timestamp = substr($timestamp, 0, 16);
    $timestamp = str_replace(' ', '&nbsp;', $timestamp);
    return $timestamp;
}

function xsm_format_phones($phones_str)
{
    $result = array();
    if (empty($phones_str))
    {
        $result["phones"] = array();
        $result["valid"] = true;
        $result["hint"] = '';
        return $result;
    }

    $result["valid"] = false;
    if (preg_match("/[^0-9()+, -]/", $phones_str))
    {
        // something strange here, cannot format
        $result["phones"] = array($phones_str);
        $result["hint"] = "Invalid characters detected. ";
        return $result;
    }

    $phones = explode(',', $phones_str);
    for ($i = 0; $i < count($phones); ++$i)
    {
        $phone = $phones[$i];
        // check digit count
        $digits = preg_replace("/[^0-9]/", "", $phone);
        if (strlen($digits) != 11)
        {
            $result["hint"] = "Strange digit count. ";
            $phones_result[] = $phone;
            // don't know how to format this
            continue;
        }

        if ($digits[0] == "7")
            $digits[0] = "8";

        $phone = substr($digits, 0, 1).'('.substr($digits, 1, 3).')'.
            substr($digits, 4, 3).'-'.substr($digits, 7, 2).'-'.substr($digits, 9, 2);

        $phones_result[] = $phone;
    }

    $result["valid"] = true;
    $result["phones"] = $phones_result;
    return $result;
}


function xsm_prepare_social_profile($social_profile)
{
    // make it valid URL if it was it form example.com/name
    if (!empty($social_profile) &&
        strpos(substr($social_profile, 0, 8), '://') === false) // http/https scheme not matched
        $social_profile = "http://$social_profile"; // assume http scheme
    $social_profile = htmlspecialchars($social_profile);
    return $social_profile;
}

function xsm_make_enum($object, $key)
{
    $enum_value = xsm_check_enum_key($key, $object[$key]);
    $css_class = str_replace('_', '-', $key);
    $values = xsm_get_enum($key);
    $title = $values[$enum_value];
    return "<span class=\"$css_class $enum_value\" id=\"$key-span\">$title</span>";
}

// TODO: non-generic function!
function xsm_make_forest_enum($person, $fn)
{
    $forest_status = xsm_check_enum_key("forest_status", $person["forest_$fn"]);
    $values = xsm_get_enum("forest_status");
    $title = $values[$forest_status];
    return "<span class=\"forest-status $forest_status\" id=\"forest_status-span\">$title</span>";
}


function xsm_draw_fio_filter()
{
    ?><span class="ankListField">Фильтр ФИО</span>:
    <input class="ankEdit filter" type="text"
        value="<?php echo htmlspecialchars(xcms_get_key_or($_POST, 'show_name_filter')); ?>"
        name="show_name_filter"
        title="Будут найдены все участники, в ФИО которых (в любом порядке) встречаются слова запроса,
        без учёта регистра. Например, 'дан Мих' найдёт Даниила Михайловича, Михаила Данилевского
        и Богдана Немихульского, но НЕ найдёт Мишу Данилкина (имена условны)" /><?php
}

function xsm_make_selector($table_name, $name, $current_key, $title_keys, $aux_cond = '', $attr = '')
{
    $db = xdb_get();
    $query = "SELECT * FROM $table_name";
    if (strlen($aux_cond))
        $query .= " WHERE $aux_cond";
    $sel = $db->query($query);
    $html = "<select name=\"$name\" id=\"$name-selector\" $attr>\n";
    $list_key = "${table_name}_id";
    while ($object = $sel->fetchArray(SQLITE3_ASSOC))
    {
        $title = "";
        foreach ($title_keys as $key_name)
            $title .= $object[$key_name].' ';
        $title = htmlspecialchars(trim($title));
        $key = $object[$list_key];
        $selected = ($key == $current_key) ? 'selected="selected"' : '';
        $html .= "<option $selected value=\"$key\">$title</option>\n";
    }
    $html .= "</select>";
    $db->close();
    return $html;
}

/**
  * Builds selector HTML element from SQL data
  * @param $list_key key name to use as option ids
  * @param $name select HTML name
  * @param $current_key selected key value
  * @param $title_pattern string with @@key@ patterns
  * that will be replaced by values taken from database
  * @example "@@book_title@ - @@author_name"
  * @param $query SQL statement to get data
  * @param $attr auxillary attributes passed to SELECT element (empty by default)
  **/
function xsm_make_selector_ext($list_key, $name, $current_key, $title_pattern, $query, $attr = '')
{
    $db = xdb_get();
    $sel = $db->query($query);
    $html = "<select name=\"$name\" id=\"$name-selector\" $attr>\n";
    while ($object = $sel->fetchArray(SQLITE3_ASSOC))
    {
        $title = $title_pattern;
        foreach ($object as $key => $value)
            $title = str_replace("@@$key@", htmlspecialchars($value), $title);
        $key = $object[$list_key];
        $selected = ($key == $current_key) ? 'selected="selected"' : '';
        $html .= "<option $selected value=\"$key\">$title</option>\n";
    }
    $html .= "</select>";
    $db->close();
    return $html;
}

function xsm_make_enum_selector($name, $value, $items)
{
    $html = "<select name=\"$name\" id=\"$name-selector\">\n";
    foreach ($items as $key => $title)
    {
        $sel = ($key == $value) ? ' selected="selected" ' : '';
        $html .= "<option $sel value=\"$key\">$title</option>\n";
    }
    $html .= "</select>";
    return $html;
}


function xsm_make_checkbox($name, $value, $checked_value)
{
    if (strlen($value)) $checked = 'checked="checked"';
    else $checked = '';
    // prepend fake input with empty value to submit it as checkbox 'unchecked' value
    // See http://iamcam.wordpress.com/2008/01/15/unchecked-checkbox-values/
    $html =
        "<input type=\"hidden\" name=\"$name\" value=\"\"/>".
        "<input class=\"ankEdit checkbox\" type=\"checkbox\" name=\"$name\" ".
            "id=\"$name-checkbox\" value=\"$checked_value\" $checked />";
    return $html;
}
?>