#!/bin/bash -e

PUBLISH_CONFIG="$HOME/.config/publishtools"
CONFIGFILE="$PUBLISH_CONFIG/publish.conf"
GCONFIGFILE="/etc/publishscripts/publish.conf"
PUBLISH_REALM="$PUBLISH_CONFIG/$(basename $0)"
mkdir -p $PUBLISH_CONFIG
mkdir -p $PUBLISH_REALM

declare -A PUBLISH_DESCRIPTIONS
declare -A RECEIPE_DESCRIPTIONS

if [ -f $CONFIGFILE ]; then
  source $CONFIGFILE
elif [ -f $GCONFIGFILE ]; then
  echo "Used global publish.conf file and copied it to local storage for futher."
  cp $GCONFIGFILE $CONFIGFILE
  source $CONFIGFILE
else
  echo "Can't file $CONFIGFILE or $GCONFIGFILE . Aborted."
fi

REALM_CONFIG=$PUBLISH_REALM/realm.conf
if [ -f  $REALM_CONFIG ]; then
  source $REALM_CONFIG
else
  echo "Can't find realm config file. Empty one was created."
  touch $REALM_CONFIG
  exit 0
fi

function do_help()
{
    TAB="\\r\\t\\t\\t"
    echo "Commands are:"
    for var in $RECEIPE_LIST; do
        echo -e "\\t$var${TAB}${RECEIPE_DESCRIPTIONS["$var"]}"
    done
    echo "Internals are: "
    echo -e "\\tadd_component${TAB}adds new component via pretty non-gui form"
    echo -e "\\tadd_receipe${TAB}adds new build receipe"
    echo -e "\\tadd_variable${TAB}adds new variable"
    echo "Options can be:"
    for var in $PUBLISH_VARIABLES; do
        # echo $var -- ${PUBLISH_DESCRIPTIONS[ownera]}
	echo -e \\t--${var}${TAB}${PUBLISH_DESCRIPTIONS["$var"]}
    done
}
function add_component
{
    TEMP_CONFIG=/tmp/publishtools.newcomponent.$RANDOM
    echo "#Autogenerated component, $(date)" >> $TEMP_CONFIG
    mkdir -p $PUBLISH_REALM/components
    read -p "Component type (git,folder,symlink,rsync,scp,ftp) : " type
    read -p "Component location (path of folder/repository)    : " location
    read -p "Target path (specify as local, i.e. ./folder)     : " local_target

    echo "type=$type" >> $TEMP_CONFIG
    echo "location=$location" >> $TEMP_CONFIG
    echo "local_target=$local_target" >> $TEMP_CONFIG
    echo "If some variables are user-defined, You can use \$variable syntax. "

    if [ $type. == "" ]; then
        echo "You've specified no type. Abort."
        rm $TEMP_CONFIG
        return 1
    elif [ $type == "git" ]; then
        read -p "Repository branch name                  : " branch
        read -p "Git internal path (in format: ./folder) : " subfolder
        echo "branch=$branch" >> $TEMP_CONFIG
        echo "subfolder=$subfolder" >> $TEMP_CONFIG
    elif [ $type == "folder" ]; then
	echo "No additional parameters required."
    elif [ $type == "symlink" ]; then
	echo "No additional parameters required."
    elif [ $type == "rsync" ]; then
	echo "No additional parameters required."
    elif [ $type == "scp" ]; then
	echo "No additional parameters required."
    elif [ $type == "ftp" ]; then
	echo "No additional parameters required."
    else
        echo "Unknown component: $type"
        return 1
    fi

    echo "Here is your component:"
    echo "======================="
    cat $TEMP_CONFIG
    echo "======================="
    read -p "Enter component's name (or empty to abort): " name
    if [ "$name." == "." ]; then
        rm $TEMP_CONFIG
        return 1
    fi
    cat $TEMP_CONFIG > $PUBLISH_REALM/components/$name
    rm $TEMP_CONFIG
    return 1
}
function add_receipe
{
    TEMP_CONFIG=/tmp/publishtools.newreceipe.$RANDOM
    mkdir -p $PUBLISH_REALM/receipes
    read -p "Enter receipe's name        : " name
    read -p "Enter receipe's description : " description
    echo "#Autogenerated receipe, $(date)" >> $TEMP_CONFIG
    COMPONENTS=""
    for i in $(ls $PUBLISH_REALM/components); do
        while [ true ]; do
            read -p "Should component $i be included? (y/n) " comp
            if [ $comp. == "y." ]; then
                COMPONENTS="$COMPONENTS $i"
                break
            fi
            if [ $comp. == "n." ]; then
                break;
            fi
        done
    done
    echo "components=\"$COMPONENTS\"" >> $TEMP_CONFIG
    COMPONENTS="begin $COMPONENTS end"
    for i in $COMPONENTS; do
        echo "# This will be executed while publishing component $i"  >> $TEMP_CONFIG
        echo "function hook_$i" >> $TEMP_CONFIG
        echo "{" >> $TEMP_CONFIG
        echo "    echo -en "" # Add something useful is you want" >> $TEMP_CONFIG
        echo "}" >> $TEMP_CONFIG
    done
    echo "Here is your receipe:"
    echo "======================="
    cat $TEMP_CONFIG
    echo "======================="
    while [ true ]; do
        read -p "Save? (y/n) " save
        if [ $save. == "y." ]; then
            cat $TEMP_CONFIG > $PUBLISH_REALM/receipes/$name.receipe
            echo "RECEIPE_LIST=\"\$RECEIPE_LIST $name\"" >> $REALM_CONFIG
            echo "RECEIPE_DESCRIPTIONS[\"$name\"]=\"$description\"">> $REALM_CONFIG
            break
        fi
        if [ $save. == "n." ]; then
            break;
        fi
    done
    rm $TEMP_CONFIG
}
function add_variable
{
    read -p "Enter variable name       : " name
    read -p "Enter variable description: " description
    while [ true ]; do
        read -p "Save? (y/n) " save
        if [ $save. == "y." ]; then
            echo "PUBLISH_VARIABLES=\"\$PUBLISH_VARIABLES $name\"" >> $REALM_CONFIG
            echo "PUBLISH_DESCRIPTIONS[\"$name\"]=\"$description\"" >> $REALM_CONFIG
            break
        fi
        if [ $save. == "n." ]; then
            break;
        fi
    done
}
function assemble_folder
{
    mkdir -p $local_target
    cp -rf $location/. $local_target/
    $hook
}
function assemble_symlink
{
    if [ -h $local_target ]; then
        echo "Symlink already presented."
    else
        ln -s $location $local_target
    fi
    $hook
}
function assemble_git
{
    mkdir -p $local_target
    TEMP_REPO=/tmp/assemble_git.$RANDOM
    git clone $location $TEMP_REPO
    OLDPWD=$(pwd)
    cd $TEMP_REPO
    git checkout $branch
    cd $OLDPWD
    mkdir -p $local_target
    cp -rf $TEMP_REPO/$subfolder/. $local_target/
    $hook
    rm -rf $TEMP_REPO
}
function assemble
{
    RECEIPE=$1
    COMMAND=$2
    if [ $COMMAND. != "." ]; then
      hook_$COMMAND
      return 0
    fi
    source $PUBLISH_REALM/receipes/$RECEIPE.receipe
    hook_begin
    eval $VARIABLE_HOOKS

    for variable in $PUBLISH_VARIABLES; do
        value=$(eval echo \$$variable)
        if [ "$value." == "." ]; then
            read -p "${PUBLISH_DESCRIPTIONS[$variable]} : " value
        fi
        echo -e "$variable\r\t\t\t$value"
        eval $variable=$value
    done

    if [ $sympolicy. == "date." ]; then
        sym_suffix="-$(date +$date_format)"
    elif [ $sympolicy. == "none." ]; then
        sym_suffix=""
    else
        echo "Incorrect symbolic links policy: $sympolicy. Abort."
        return 1
    fi

    for component in  $components; do
        source $PUBLISH_REALM/components/$component
        mkdir -p ${target}${sym_suffix}
        cd ${target}${sym_suffix}
        hook=hook_$component
        assemble_$type
        cd ${target}${sym_suffix}
    done
    if [ "$sym_suffix." == "." ]; then
        echo -en ""
    else
        if [ -h ${target} ]; then
          rm ${target}
        fi
	ln -s ${target}${sym_suffix} ${target}
    fi

    chown -R $owner ${target}${sym_suffix}
    hook_end

}
function main
{
    PUBLISH_VARIABLES="$PUBLISH_VARIABLES $SYSTEM_PUBLISH_VARIABLES"
    VARIABLE_HOOKS=""
    while [ true ]; do
        ARG=$1
        NEXT=$2
        if [ "$ARG." == "." ]; then
            do_help
            exit 0
        fi
        shift
        if [ "$ARG." == "--help." ]; then
            do_help
            exit 0
        fi
        if [ "$ARG." == "add_component." ]; then
            add_component
            exit 0
        fi
        if [ "$ARG." == "add_variable." ]; then
            add_variable
            exit 0
        fi
        if [ "$ARG." == "add_receipe." ]; then
            add_receipe
            exit 0
        fi
        if [ -f $PUBLISH_REALM/receipes/$ARG.receipe ]; then
            assemble $ARG $NEXT
            exit 0
        fi
        #if [ "$ARG." == "assemble." ]; then
        #    assemble $1
        #    exit 0
        #fi
        found=false
        for candidate in $PUBLISH_VARIABLES; do
            if [ $ARG == "--$candidate" ]; then
                VARIABLE_HOOKS="$VARIABLE_HOOKS $candidate=$1"
                shift
                found=true
                break
            fi
        done
        if [ $found == true ]; then
            continue
        fi
        echo "Illegal command: $1";
        exit 1
    done
}

main $*
